# @format

version: '3.8'

services:
  posbackend:
    image: docker.oneshell.in/library/posbackend:latest
    container_name: posbackend
    restart: always
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
    ports:
      - '8090:8090'
    depends_on:
      - mongodb
      - nats-server
    environment:
      - NATS_URL=${NATS_URL}
      - NATS_REMOTE_URL=${NATS_REMOTE_URL}
      - SPRING_PROFILES_ACTIVE=default
      - MONGODB_URI=${MONGODB_URI}
      - JAVA_OPTS=-Xms3g -Xmx3.5g -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xlog:gc*
    volumes:
      - ~/data/java/logs:/var/log/posbackend
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4096M # Increased memory limit to 4GB
        reservations:
          cpus: '1'
          memory: 3072M # Increased reservation to 3GB
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8090/actuator/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  posNodeBackend:
    image: docker.oneshell.in/library/posnodebackend:latest
    container_name: posNodeBackend
    restart: always
    privileged: true # Runs the container with extended privileges
    # network_mode: 'host' # Use the host network for direct access to services
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
    ports:
      - '3001:3001'
    depends_on:
      - mongodb
    environment:
      - NODE_ENV=production
    volumes:
      # - C:\Windows\System32\spool:/spool:nocopy # Mount the Windows print spooler directory; won't fail if not present
      - ~/data/node/logs:/var/log/posNodeBackend
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  posFrontend:
    image: docker.oneshell.in/library/pos:latest
    container_name: posFrontend
    restart: always
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
    ports:
      - '80:80'
      - '443:443' # Expose port 443 for HTTPS
    environment:
      - NODE_ENV=production
    networks:
      - app-network
    volumes:
      - ~/data/pos/cert:/etc/nginx/certs
    depends_on:
      - posbackend
      - posNodeBackend

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    volumes:
      - ~/data/mongo-data:/data/db
    labels:
      - 'com.centurylinklabs.watchtower.enable=false'
    ports:
      - '27017:27017'
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1536M
        reservations:
          cpus: '0.3'
          memory: 300M
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'mongo', '--eval', "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  nats-server:
    image: docker.oneshell.in/library/nats:latest
    container_name: nats-server
    restart: always
    labels:
      - 'com.centurylinklabs.watchtower.enable=false'
    ports:
      - '4222:4222'
      - '8222:8222'
      - '8080:8080'
    volumes:
      - ~/data/nats-data:/data/jetstream
      - ./nats-server.conf:/nats-server.conf
    command: ['--config', '/nats-server.conf']
    environment:
      - JS_STORAGE_TYPE=file
      - JS_STORAGE_DIR=/data/jetstream
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 1024M
        reservations:
          cpus: '0.2'
          memory: 64M
    networks:
      - app-network
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: always
    labels:
      - 'com.centurylinklabs.watchtower.enable=false'
    environment:
      - TZ=Europe/London
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_ROLLING_RESTART=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config/config.json:/config.json
    command: --interval 20
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    networks:
      - app-network

  compose-updater:
    image: docker.oneshell.in/library/compose-builder:latest
    container_name: compose-updater
    restart: always
    labels:
      - 'com.centurylinklabs.watchtower.enable=true'
    ports:
      - '5001:5000'
    environment:
      - GITHUB_REPO=${GITHUB_REPO}
      - COMPOSE_FILE_PATH=${COMPOSE_FILE_PATH}
      - REQUIRED_SERVICES=${REQUIRED_SERVICES}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ~/data/python/logs:/app/logs
      - ./config/config.json:/root/.docker/config.json
    networks:
      - app-network
    logging:
      driver: 'json-file'
      options:
        max-size: '10m'
        max-file: '3'

networks:
  app-network:
    driver: bridge
